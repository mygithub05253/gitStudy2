파일 확장자
=> 해당 파일이 어떤 파일인지 알려주는 역할
=> 파일마다 정해져 있음(.txt, .pptx, .xlsx 등)
=> 보기 -> 파일 확장자 체크

GUI (Graphic User Interface)
=> 사용자가 편하게 사용할 수 있도록 버튼이나 아이콘과 같은 그래픽 기반의 사용 환경

CLI (Command Line Interface)
=> 명령어 기반 사용 환경

소스 트리(Source Tree)
=> git을 쉽게 사용할 수 있도록 도와주는 외부 gui tool

git의 공간 분리
=> 동작과 이력을 효율적으로 처리하기 위해서 저장 공간을 논리적으로 분리
=> 작업 공간(working directory/working tree)
=> 임시 저장 공간(stage)
=> 실질적으로 저장되고 기록되는 공간(repository)

작업 공간(working tree)
=> 작업을 하는 공간
=> 로컬 저장소에 접근하여 파일을 생성, 수정, 저장하는 공간
=> 스테이지(stage) 영역과 맞닿아 있음
=> 작업 공간에 새롭게 만들어진 파일들의 최초 상태는 untracked 상태
=> 따라서 해당 파일들의 수정 사항을 반영하고 싶다면 tracked로 변경해줘야 함
= 이 파일들을 관리해달라고 통지하는 것

임시 저장 공간(stage)
=> tracked된 파일들을 관리하는 영역
=> 작업 공간과 연결되어 있음
=> tracked된 파일들의 추적 상태를 잠시 복사하여 저장
=> stage 영역에 저장된 파일들은 모두 tracked 상태가 됨
=> 최종적인 파일의 변화를 영구적으로 저장하기 위해서는 모든 파일의 상태가 stage 상태가 되어야 함
=> unstage 상태는 스테이지 영역에 있는 파일과 working directory 안의 파일이 서로 차이가 있을 때를 의미
=> stage에 올라가지 않은, 작업 공간에 새롭게 만들어진 파일(untracked 파일)도 unstage 상태라고 할 수 있음
=> stage 상태, unstage 상태
=> 원본과 수정본의 기록을 구분하기 위해 modified, unmodified로 구분

EX)
워킹 디렉토리
	tracked
			test.txt
				unmodified 상태 => stage 상태
			test2.txt
				modified 상태 => unstage 상태
	untracked
			test3.txt => unstage 상태

=> 추후 실제 기록하여 저장하는 공간(repository)가 됨
				

CLI에서 사용되는 git 명령어 => 항상 git으로 시작 => git git명령어
1. 초기화 명령어(저장소 생성) : git init
2. track 상태로 변경(통지) : git add 파일명
=> 해당 명령어를 실행하면 해당 파일이 tracked 상태로 변경
3. 상태 확인 명령어 : git status

GUI(source tree)에서는 파일 옆의 + 버튼을 클릭하면 tracked 상태로 변경이 되고, stage에 등록됨

